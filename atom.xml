<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>reezon</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://reezon.github.io/"/>
  <updated>2018-10-15T06:55:04.441Z</updated>
  <id>http://reezon.github.io/</id>
  
  <author>
    <name>reezon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何在dva的effects中实现回调</title>
    <link href="http://reezon.github.io/2018/10/15/%E5%A6%82%E4%BD%95%E5%9C%A8dva%E7%9A%84effects%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%9B%9E%E8%B0%83/"/>
    <id>http://reezon.github.io/2018/10/15/如何在dva的effects中实现回调/</id>
    <published>2018-10-15T06:16:24.000Z</published>
    <updated>2018-10-15T06:55:04.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>在前端实现修改用户密码的功能，通过dispatch来实现与后端api接口的交互。</p><p>界面点击“提交”执行的代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">handleSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; form, dispatch &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">  form.validateFields(<span class="function">(<span class="params">err, fieldsValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> values = &#123;</span><br><span class="line">      ...fieldsValue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: <span class="string">'account/modifyPwd'</span>,</span><br><span class="line">      payload: values</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>model中effect的代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* modifyPwd (&#123; payload &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">yield</span> call(apiMethod, payload)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时前端需要获取到调用接口的结果，来显示“修改成功”or“修改失败”，</p><h3 id="方法一：自己构造Promise"><a href="#方法一：自己构造Promise" class="headerlink" title="方法一：自己构造Promise"></a>方法一：自己构造Promise</h3><p>由于dva的1.x版本并未实现callback，只能通过自己构造Promise来实现回调。</p><p>界面代码修改为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">handleSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; form, dispatch &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    form.validateFields(<span class="function">(<span class="params">err, fieldsValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> values = &#123;</span><br><span class="line">        ...fieldsValue</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        dispatch(&#123;</span><br><span class="line">          type: <span class="string">'account/modifyPwd'</span>,</span><br><span class="line">          payload: &#123;</span><br><span class="line">            data: values,</span><br><span class="line">            resolve</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (res) &#123;</span><br><span class="line">            message.success(<span class="string">'修改成功'</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            message.error(<span class="string">'修改失败'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>model中的effect代码修改为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* modifyPwd (&#123; payload &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, resolve &#125; = payload</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">yield</span> call(apiMethod, data)</span><br><span class="line">  !!resolve &amp;&amp; resolve(response)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法二：优雅的callback写法"><a href="#方法二：优雅的callback写法" class="headerlink" title="方法二：优雅的callback写法"></a>方法二：优雅的callback写法</h3><p>在dva 2.x下，有另外一种callback的优雅的写法。</p><p>界面代码修改为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">handleSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; form, dispatch &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">  form.validateFields(<span class="function">(<span class="params">err, fieldsValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> values = &#123;</span><br><span class="line">      ...fieldsValue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: <span class="string">'account/modifyPwd'</span>,</span><br><span class="line">      payload: values,</span><br><span class="line">      callback: <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (response) &#123;</span><br><span class="line">          message.success(<span class="string">'修改成功'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          message.error(<span class="string">'修改失败'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>model中的effect代码修改为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* modifyPwd (&#123; payload, callback &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">yield</span> call(apiMethod, payload)</span><br><span class="line">  <span class="keyword">if</span> (callback &amp;&amp; <span class="keyword">typeof</span> callback === <span class="string">'function'</span>) &#123;</span><br><span class="line">      callback(response)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法三：使用then方法"><a href="#方法三：使用then方法" class="headerlink" title="方法三：使用then方法"></a>方法三：使用then方法</h3><p>在dva 2.x下，默认对dispatch提供了Promise回调，但是并未提供传参逻辑，因此需要通过model中的state来实现传参。</p><p>界面代码修改为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">handleSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; form, dispatch, account &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">  form.validateFields(<span class="function">(<span class="params">err, fieldsValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> values = &#123;</span><br><span class="line">      ...fieldsValue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: <span class="string">'account/modifyPwd'</span>,</span><br><span class="line">      payload: values</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (account.modifyState) &#123;</span><br><span class="line">        message.success(<span class="string">'修改成功'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        message.error(<span class="string">'修改失败'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>model中的effect代码修改为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* modifyPwd (&#123; payload &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">yield</span> call(apiMethod, payload)</span><br><span class="line">  <span class="keyword">yield</span> put(&#123;</span><br><span class="line">    type: <span class="string">'saveModifyState'</span>,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      response: response</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在model中实现一个reducer方法来修改state中的modifyState的状态：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">saveModifyState (state, &#123; payload &#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...state,</span><br><span class="line">    modifyState: payload.response</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>方法一在dva 1.x下是唯一的实现方式，在2.x之后就不再需要这么繁琐的写法了。</li><li>方法二通俗易懂，代码简洁，但是破坏了传统的redux的数据流转方式，不被布道者所提倡。</li><li>方法三是官方提倡的写法，但是需要多实现一个reducer，代码量比方法二要大。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;在前端实现修改用户密码的功能，通过dispatch来实现与后端api接口的交互。&lt;/p&gt;
&lt;p&gt;界面点击“提交”执行的代码如下：&lt;br&gt;&lt;f
      
    
    </summary>
    
    
      <category term="dva redux react" scheme="http://reezon.github.io/tags/dva-redux-react/"/>
    
  </entry>
  
  <entry>
    <title>如何在ubuntu上快速搭建shadowsocks</title>
    <link href="http://reezon.github.io/2018/05/23/%E5%A6%82%E4%BD%95%E5%9C%A8ubuntu%E4%B8%8A%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAshadowsocks/"/>
    <id>http://reezon.github.io/2018/05/23/如何在ubuntu上快速搭建shadowsocks/</id>
    <published>2018-05-23T10:39:17.000Z</published>
    <updated>2018-05-23T11:17:39.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>购买海外vps，配置1核1G即可，操作系统选择Ubuntu。</p><p>海外vps推荐<a href="https://bandwagonhost.com/aff.php?aff=32245" target="_blank" rel="noopener">bandwagon</a>（俗称搬瓦工）和<a href="https://www.vultr.com/?ref=7432142" target="_blank" rel="noopener">vultr</a>。</p><p>通过nodejs的npm命令来安装shadowsocks是最快捷方便的方式，下面就来安装。</p><h2 id="安装nodejs环境"><a href="#安装nodejs环境" class="headerlink" title="安装nodejs环境"></a>安装nodejs环境</h2><p>执行命令更新系统包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt update</span><br></pre></td></tr></table></figure></p><p>安装nodejs 8.x版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -</span><br><span class="line">$ apt-get install -y nodejs</span><br></pre></td></tr></table></figure></p><h2 id="安装pm2"><a href="#安装pm2" class="headerlink" title="安装pm2"></a>安装pm2</h2><p>pm2可以看做一个nodejs环境下的服务器，利用它来启动和维持shadowsocks服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm -g i pm2</span><br></pre></td></tr></table></figure></p><h2 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h2><p>执行命令安装shadowsocks<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm -g i shadowsocks</span><br></pre></td></tr></table></figure></p><p>然后，编辑配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/lib/node_modules/shadowsocks/config.json</span><br></pre></td></tr></table></figure></p><p>修改后的文件内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>:<span class="number">8083</span>,</span><br><span class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"myPassword"</span>,</span><br><span class="line">    <span class="string">"timeout"</span>:<span class="number">600</span>,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从配置文件可以知道，对外的服务端口是<code>8083</code>，密码是<code>myPassword</code>，加密方式是<code>aes-256-cfb</code></p><h2 id="在pm2中启动shadowsocks服务"><a href="#在pm2中启动shadowsocks服务" class="headerlink" title="在pm2中启动shadowsocks服务"></a>在pm2中启动shadowsocks服务</h2><p>执行命令启动服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start /usr/bin/ssserver</span><br></pre></td></tr></table></figure></p><p>通过如下命令能够看到pm2下正常服务的应用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 ls</span><br></pre></td></tr></table></figure></p><p>通过如下命令能够看到shadowsocks服务的日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 logs ssserver</span><br></pre></td></tr></table></figure></p><p>就此shadowsocks已经成功安装在服务器上了。</p><h2 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h2><p>到github上去下载对应的客户端</p><ul><li>windows客户端下载地址：<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></li><li>MacOS客户端下载地址：<a href="https://github.com/SHAU-LOK/shadowsocks-mac-dmg/blob/master/ShadowsocksX-2.6.3.dmg" target="_blank" rel="noopener">https://github.com/SHAU-LOK/shadowsocks-mac-dmg/blob/master/ShadowsocksX-2.6.3.dmg</a></li><li>Android客户端下载地址：<a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android/releases</a></li></ul><p>（注：iPhone由于应用在App Store下架了，所以就自己去App Store找类似的shadowsocks客户端）</p><p>安装完毕之后，只需要配置服务器的ip地址、端口、密码、加密方式，就能正常使用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;p&gt;购买海外vps，配置1核1G即可，操作系统选择Ubuntu。&lt;/p&gt;
&lt;p&gt;海外vps推荐&lt;a href=&quot;https://
      
    
    </summary>
    
    
      <category term="ubuntu shadowsocks" scheme="http://reezon.github.io/tags/ubuntu-shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>关于ss(酸酸)和ssr(酸酸乳)，还有vpn和socks5</title>
    <link href="http://reezon.github.io/2018/05/23/%E5%85%B3%E4%BA%8Ess(%E9%85%B8%E9%85%B8)%E5%92%8Cssr(%E9%85%B8%E9%85%B8%E4%B9%B3)%EF%BC%8C%E8%BF%98%E6%9C%89vpn%E5%92%8Csocks5/"/>
    <id>http://reezon.github.io/2018/05/23/关于ss(酸酸)和ssr(酸酸乳)，还有vpn和socks5/</id>
    <published>2018-05-23T06:16:29.000Z</published>
    <updated>2018-05-23T11:17:30.451Z</updated>
    
    <content type="html"><![CDATA[<p>这个话题，应该从vpn开始。</p><h2 id="什么是vpn"><a href="#什么是vpn" class="headerlink" title="什么是vpn"></a>什么是vpn</h2><p>vpn在很多人心目中就是用来出墙的工具，其实不是。vpn最主要的功能，并不是用来出墙，只是它可以达到出墙的目的。</p><p>vpn全称Virtual Private Network（虚拟专用网络），严格来讲它并不是代理，而是一条通路，它的功能是：在公用网络上建立专用网络，进行加密通讯。</p><p>vpn最典型的应用是在企业网络和高校网络中，因为企业或高校出于安全考虑会自建内网，在软件逻辑上与外网隔离，但是物理网络上联通的。通过正常途径外网是无法访问到这种内网的。而vpn可以在外网电脑和内网之间搭建一条畅通的道路。外网电脑安装好vpn客户端并进行正确的配置后，就等同于加入了内网网络，可以访问到内网中的任何节点、任何服务了。</p><p>所以，当我们把这个场景想象为：</p><ul><li>企业内网-&gt;外面的互联网</li><li>外网电脑-&gt;我们自己的想出去看看的电脑</li></ul><p>这就是vpn最让人心醉的用途。</p><h2 id="什么是ss-ssr"><a href="#什么是ss-ssr" class="headerlink" title="什么是ss/ssr"></a>什么是ss/ssr</h2><p>首先我们先对一些黑话名词进行解释：</p><ul><li>酸酸-&gt;ss-&gt;shadowsocks</li><li>酸酸乳-&gt;ssr-&gt;shadowsocksr</li><li>破娃/破娃酱-&gt;ssr的作者，因为github账号名为breakwa11</li></ul><p>ss作者是clowwindy，大约两年前，他自己为了翻墙写了ss，后来他觉得这个东西非常好用，速度快，而且不会被封锁，他就把源码共享在了github上，然后就火了，但是后来作者被请去喝茶，删了代码，并且保证不再参与维护更新。现在这个好像是一个国外的大兄弟在维护。</p><p>在ss作者被喝茶之后，github上出现了一个叫breakwa11的帐号，声称ss容易被防火墙检测到，所以在混淆和协议方面做了改进，更加不容易被检测到，而且兼容ss，改进后的项目叫shadowsocks-R，简称ssr，然后ss用户和ssr用户自然分成了两个派别，互相撕逼，直到前阵子，破娃被人肉出来，无奈之下删除了ssr的代码，并且解散了所有相关群组。</p><h2 id="什么是socks5"><a href="#什么是socks5" class="headerlink" title="什么是socks5"></a>什么是socks5</h2><p>ss和ssr都是使用socks5来实现。</p><p>socks(socket security,)是一种基于传输层的网络代理协议。对于各种基于TCP/IP的应用层协议都能够适应。它能够忠实地转发客户端-服务器打的通讯包，完成协议本来要完成的功能。现在的协议是v5，也就是Scoks5协议。</p><p>socks5代理是把你的网络数据由代理服务器转发到目的地，这个过程中你是没有一条专用通道的，只是数据包的发出，然后被代理服务器收到，然后代理服务器再进行转发，整个过程并没有额外的处理。socks代理只是简单的传递数据包，而不必关心是何种协议，所以socks代理比其他应用层代理要快的多。</p><h2 id="vpn和socks5的区别"><a href="#vpn和socks5的区别" class="headerlink" title="vpn和socks5的区别"></a>vpn和socks5的区别</h2><ul><li>vpn是建立一条虚拟隧道，所有的应用都走这条路出去。socks5是特定的应用（http等）走代理，其它的应用不会走。</li><li>vpn会给你分配一个内网地址，socks5不会。</li><li>vpn不需要配置端口号，socks5需要。</li></ul><h2 id="我要出墙选哪个"><a href="#我要出墙选哪个" class="headerlink" title="我要出墙选哪个"></a>我要出墙选哪个</h2><p>因为vpn是走的专用通道，它是用来给企业传输加密数据用的，所以vpn的流量特征很明显，以openvpn为例，更详细的在这里不说了，流量特征明显，防火墙直接分析你的流量，如果特征匹配，直接封掉。目前就出墙来说，PPTP类型的vpn基本死的差不多了，L2TP大部分地区干扰严重很不稳定。</p><p>ss/ssr的目的就是用来出墙的，对于vpn来说安全是第一位的，而对于ss/ssr来说穿透防火墙是第一位，抗干扰性强，而且对流量做了混淆，所有流量在通过防火墙的时候，基本上都被识别为普通流量。</p><h2 id="有没有好用的ss"><a href="#有没有好用的ss" class="headerlink" title="有没有好用的ss"></a>有没有好用的ss</h2><p>既然想用ss/ssr，那么就去找便宜的海外vps（虚拟服务器）吧，大约在4刀每月，然后在上面架个ss/ssr服务，就可以使用了。</p><p>海外vps推荐<a href="https://bandwagonhost.com/aff.php?aff=32245" target="_blank" rel="noopener">bandwagon</a>（俗称搬瓦工）和<a href="https://www.vultr.com/?ref=7432142" target="_blank" rel="noopener">vultr</a>。</p><p>至于如何在vps上搭建ss服务器，请参考下一篇文章吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个话题，应该从vpn开始。&lt;/p&gt;
&lt;h2 id=&quot;什么是vpn&quot;&gt;&lt;a href=&quot;#什么是vpn&quot; class=&quot;headerlink&quot; title=&quot;什么是vpn&quot;&gt;&lt;/a&gt;什么是vpn&lt;/h2&gt;&lt;p&gt;vpn在很多人心目中就是用来出墙的工具，其实不是。vpn最主要的
      
    
    </summary>
    
    
      <category term="vpn socks5 shadowsocks" scheme="http://reezon.github.io/tags/vpn-socks5-shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>文件名排序算法分析</title>
    <link href="http://reezon.github.io/2018/05/11/%E6%96%87%E4%BB%B6%E5%90%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>http://reezon.github.io/2018/05/11/文件名排序算法分析/</id>
    <published>2018-05-11T08:35:28.000Z</published>
    <updated>2018-05-11T10:06:23.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要解决的问题"><a href="#要解决的问题" class="headerlink" title="要解决的问题"></a>要解决的问题</h2><p>用户在上传海量图片的时候，我们希望提供能够根据图片文件名进行正序/逆序排序的功能。</p><p>但是，传统的localeCompare方法，在面对包含数字和字符的字符串数组的排序时，会遇到如下问题：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = [<span class="string">'0509_1.jpg'</span>, <span class="string">'0509_2.jpg'</span>, <span class="string">'0509_11.jpg'</span>]</span><br></pre></td></tr></table></figure></p><p>经过<code>localeCompare()</code>排序后，会变成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [<span class="string">'0509_1.jpg'</span>, <span class="string">'0509_11.jpg'</span>, <span class="string">'0509_2.jpg'</span>]</span><br></pre></td></tr></table></figure></p><p>显然这不是我们想要的结果</p><h2 id="natsort库分析"><a href="#natsort库分析" class="headerlink" title="natsort库分析"></a>natsort库分析</h2><p>幸运地，我们在github上找到一个成熟的排序库<a href="https://github.com/bubkoo/natsort" target="_blank" rel="noopener">natsort</a>。</p><p>该算法中，最重要的就在于正则表达式的构建，才能准确地将数字从字符串中识别并分离出来。</p><p>下面我们分析一下它的源码，一起学习一下如何正确地比较两个字符串的大小。</p><h4 id="Step1-去掉空格"><a href="#Step1-去掉空格" class="headerlink" title="Step1: 去掉空格"></a>Step1: 去掉空格</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tre = <span class="regexp">/^\s+|\s+$/g</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceWhiteSpace</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="string">''</span> + s).replace(tre, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step2-将包含的数字部分进行拆分"><a href="#Step2-将包含的数字部分进行拆分" class="headerlink" title="Step2: 将包含的数字部分进行拆分"></a>Step2: 将包含的数字部分进行拆分</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nre = <span class="regexp">/(0x[\da-fA-F]+|(^[\+\-]?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?(?=\D|\s|$))|\d+)/g</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitString</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.replace(nre, <span class="string">'\0$1\0'</span>)</span><br><span class="line">          .replace(<span class="regexp">/\0$/</span>, <span class="string">''</span>)</span><br><span class="line">          .replace(<span class="regexp">/^\0/</span>, <span class="string">''</span>)</span><br><span class="line">          .split(<span class="string">'\0'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step3-判断是否为Hex或者日期"><a href="#Step3-判断是否为Hex或者日期" class="headerlink" title="Step3: 判断是否为Hex或者日期"></a>Step3: 判断是否为Hex或者日期</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hre = <span class="regexp">/^0x[0-9a-f]+$/i</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseHex</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(s.match(hre), <span class="number">16</span>) || <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dre = <span class="regexp">/(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d&#123;1,4&#125;[\/\-]\d&#123;1,4&#125;[\/\-]\d&#123;1,4&#125;|^\w+, \w+ \d+, \d&#123;4&#125;)/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseDatetime</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.match(dre) &amp;&amp; <span class="built_in">Date</span>.parse(s) || <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step4-对已拆分的两个数组进行比较"><a href="#Step4-对已拆分的两个数组进行比较" class="headerlink" title="Step4: 对已拆分的两个数组进行比较"></a>Step4: 对已拆分的两个数组进行比较</h4><p>代码就不贴出来了，大概的思路就是：</p><ol><li>遍历两个数组，对其中的数字转换为字符串；</li><li>对转换出来的字符串使用localeCompare进行比较；</li></ol><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>参见<a href="https://github.com/bubkoo/natsort" target="_blank" rel="noopener">natsort</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;要解决的问题&quot;&gt;&lt;a href=&quot;#要解决的问题&quot; class=&quot;headerlink&quot; title=&quot;要解决的问题&quot;&gt;&lt;/a&gt;要解决的问题&lt;/h2&gt;&lt;p&gt;用户在上传海量图片的时候，我们希望提供能够根据图片文件名进行正序/逆序排序的功能。&lt;/p&gt;
&lt;p&gt;但是，传统
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>electron入门心得</title>
    <link href="http://reezon.github.io/2018/04/25/electron%E5%85%A5%E9%97%A8%E5%BF%83%E5%BE%97/"/>
    <id>http://reezon.github.io/2018/04/25/electron入门心得/</id>
    <published>2018-04-25T11:25:50.000Z</published>
    <updated>2018-04-26T07:33:13.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="在macOS上全局安装electron"><a href="#在macOS上全局安装electron" class="headerlink" title="在macOS上全局安装electron"></a>在macOS上全局安装electron</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g electron --unsafe-perm=<span class="literal">true</span> --allow-root</span><br></pre></td></tr></table></figure><h4 id="部署quick-start"><a href="#部署quick-start" class="headerlink" title="部署quick-start"></a>部署quick-start</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/electron/electron-quick-start</span><br></pre></td></tr></table></figure><h2 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h2><h3 id="electron-forge"><a href="#electron-forge" class="headerlink" title="electron-forge"></a>electron-forge</h3><h4 id="1-安装electron-forge"><a href="#1-安装electron-forge" class="headerlink" title="1.安装electron-forge"></a>1.安装electron-forge</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g electron-forge</span><br></pre></td></tr></table></figure><h4 id="2-初始化项目"><a href="#2-初始化项目" class="headerlink" title="2.初始化项目"></a>2.初始化项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ electron-forge init my-new-project --lintstyle=standard --template=react</span><br></pre></td></tr></table></figure><h4 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ electron-forge start</span><br></pre></td></tr></table></figure><h4 id="4-打包项目"><a href="#4-打包项目" class="headerlink" title="4.打包项目"></a>4.打包项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ electron-forge package</span><br></pre></td></tr></table></figure><h3 id="electron-vue"><a href="#electron-vue" class="headerlink" title="electron-vue"></a>electron-vue</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 vue-cli，使用脚手架样板代码初始化项目</span></span><br><span class="line">$ npm install -g vue-cli</span><br><span class="line">$ vue init simulatedgreg/electron-vue my-project</span><br></pre></td></tr></table></figure><h2 id="主进程与渲染进程"><a href="#主进程与渲染进程" class="headerlink" title="主进程与渲染进程"></a>主进程与渲染进程</h2><p>electron的开发主要涉及到两个进程的操作：Main主进程，Renderer渲染进程。</p><p>主进程主要通过nodejs、chromium、native apis来实现一些系统或底层的操作，比如操作剪贴板等。</p><p>渲染进程主要通过chromium来实现web界面。</p><p>两个进程通过<code>ipcMain</code>和<code>ipcRenderer</code>来进行通信</p><h4 id="主进程向渲染进程发消息"><a href="#主进程向渲染进程发消息" class="headerlink" title="主进程向渲染进程发消息"></a>主进程向渲染进程发消息</h4><p>main.js文件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当页面加载完成时，会触发`did-finish-load`事件。</span></span><br><span class="line">win.webContents.on(<span class="string">'did-finish-load'</span>, () =&gt; &#123;</span><br><span class="line">  win.webContents.send(<span class="string">'main-process-messages'</span>, <span class="string">'webContents event "did-finish-load" called'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>renderer.js文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入ipcRenderer对象</span></span><br><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"><span class="keyword">const</span> ipcRenderer = electron.ipcRenderer;</span><br><span class="line"><span class="comment">// 设置监听</span></span><br><span class="line">ipcRenderer.on(<span class="string">'main-process-messages'</span>, (event, message) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'message from Main Process: '</span> , message);  <span class="comment">// Prints Main Process Message.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="渲染进程向主进程发消息"><a href="#渲染进程向主进程发消息" class="headerlink" title="渲染进程向主进程发消息"></a>渲染进程向主进程发消息</h4><p>renderer.js文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入ipcRenderer对象</span></span><br><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"><span class="keyword">const</span> ipcRenderer = electron.ipcRenderer;</span><br><span class="line">ipcRenderer.send(<span class="string">'asynchronous-message'</span>, <span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line">ipcRenderer.on(<span class="string">'asynchronous-reply'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'asynchronous-reply: %O %O'</span>, event, arg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>main.js文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ipcMain.on(<span class="string">'asynchronous-message'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 返回消息</span></span><br><span class="line">  event.sender.send(<span class="string">'asynchronous-reply'</span>, <span class="string">'ok'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h4 id=&quot;在macOS上全局安装electron&quot;&gt;&lt;a href=&quot;#在macOS上全局安装electron&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="electron" scheme="http://reezon.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>使用acme.sh实现海量域名SSL证书自动申请与更新</title>
    <link href="http://reezon.github.io/2018/04/18/%E4%BD%BF%E7%94%A8acme-sh%E5%AE%9E%E7%8E%B0%E6%B5%B7%E9%87%8F%E5%9F%9F%E5%90%8DSSL%E8%AF%81%E4%B9%A6%E8%87%AA%E5%8A%A8%E7%94%B3%E8%AF%B7%E4%B8%8E%E6%9B%B4%E6%96%B0/"/>
    <id>http://reezon.github.io/2018/04/18/使用acme-sh实现海量域名SSL证书自动申请与更新/</id>
    <published>2018-04-18T08:56:40.000Z</published>
    <updated>2018-04-18T12:06:11.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>公司有个非常重要的业务：为摄影师们提供独立域名的个人网站建站服务。</p><p>考虑到安全性，及提升B格，我们给个人网站上了SSL手段。</p><p>从2017年起，各大证书商纷纷推出免费DV证书，让这个任务实现了零成本。</p><p>但是阿里云每个账号仅允许申请20个免费SSL证书，腾讯云再多也是50个。</p><p>当各个平台的羊毛薅完一遍之后，还是不够用，只能回到Let’s Encrypt，频繁地在<a href="https://www.sslforfree.com" target="_blank" rel="noopener">sslforfree</a>上人肉申请证书。</p><p>该证书唯一的最大的不足，就是只有90天有效期，这就带来了后期非常繁琐的重复性工作。</p><p>如何通过工具自动化地完成这个流程，就是本文要解决的问题。</p><h2 id="关于acme-sh"><a href="#关于acme-sh" class="headerlink" title="关于acme.sh"></a>关于acme.sh</h2><p>ACME全称The Automatic Certificate Management Environment，而<a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="noopener">acme.sh</a>这个库，则能够在Linux上实现如下功能：</p><ol><li>自动向Let’s Encrypt申请证书；</li><li>自动调用各大云平台的api接口实现TXT解析配置；</li><li>证书下发后自动部署到nginx；</li><li>利用定时器，每60天自动更新证书，并完成自动部署。</li></ol><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>部署环境：Ubuntu 14.06 + nginx，域名注册与解析位于阿里云</p><h3 id="安装acme-sh"><a href="#安装acme-sh" class="headerlink" title="安装acme.sh"></a>安装acme.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O -  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure></p><p>这个自动安装过程完成了以下几个步骤：</p><ol><li>拷贝sh脚本到<code>~/.acme.sh/</code></li><li>创建alias别名<code>acme.sh=~/.acme.sh/acme.sh</code></li><li>启动定时器</li></ol><h3 id="配置阿里云解析"><a href="#配置阿里云解析" class="headerlink" title="配置阿里云解析"></a>配置阿里云解析</h3><p>运行如下命令，配置阿里云api接口的key和secret，其中的值需要到阿里云控制台中去寻找。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> Ali_Key=<span class="string">"sdfsdfsdfljlbjkljlkjsdfoiwje"</span></span><br><span class="line">$ <span class="built_in">export</span> Ali_Secret=<span class="string">"jlsdflanljkljlfdsaklkjflsa"</span></span><br></pre></td></tr></table></figure></p><p>这两个配置将永久保存在文件<code>~/.acme.sh/account.conf</code>中</p><h3 id="为域名申请证书"><a href="#为域名申请证书" class="headerlink" title="为域名申请证书"></a>为域名申请证书</h3><p>运行如下命令，一键申请证书。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ acme.sh --issue --dns dns_ali -d www.example.com</span><br></pre></td></tr></table></figure></p><p>证书申请成功后，保存在<code>~/.acme.sh/www.example.com</code>目录下</p><h3 id="将证书部署到nginx"><a href="#将证书部署到nginx" class="headerlink" title="将证书部署到nginx"></a>将证书部署到nginx</h3><p>运行如下命令，自动将证书部署到nginx。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ acme.sh --install-cert -d www.example.com \</span><br><span class="line">  --key-file       /path/to/keyfile/<span class="keyword">in</span>/nginx/key.key  \</span><br><span class="line">  --fullchain-file /path/to/fullchain/nginx/cert.pem \</span><br><span class="line">  --reloadcmd     <span class="string">"nginx -s reload"</span></span><br></pre></td></tr></table></figure></p><p>该命令中的参数将自动保存在<code>~/.acme.sh/www.example.com</code>目录下的<code>www.example.com.conf</code>文件里，定时器更新证书的时候实现自动部署。</p><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><p>在nginx的配置文件中配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name www.example.com;</span><br><span class="line"></span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate ./www.example.com.pem;</span><br><span class="line">        ssl_certificate_key ./www.example.com.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_session_cache shared:SSL:20m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers   on;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://localhost:3000;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h2><p>在服务器上部署一个小nodejs服务，通过调用该服务的api接口，来运行对应的脚本，就能够实现新域名的证书申请+证书部署。</p><p>而证书的更新，就交给acme.sh，高枕无忧了~！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;公司有个非常重要的业务：为摄影师们提供独立域名的个人网站建站服务。&lt;/p&gt;
&lt;p&gt;考虑到安全性，及提升B格，我们给个人网站上了SSL手段。&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nodejs之古老的async</title>
    <link href="http://reezon.github.io/2018/04/11/nodejs%E4%B9%8B%E5%8F%A4%E8%80%81%E7%9A%84async/"/>
    <id>http://reezon.github.io/2018/04/11/nodejs之古老的async/</id>
    <published>2018-04-11T06:09:29.000Z</published>
    <updated>2018-04-11T13:58:12.417Z</updated>
    
    <content type="html"><![CDATA[<p>在 Promise和async/await出现之前，nodejs只能使用async库来解决“回调金字塔问题”</p><p>把async中一些常用的语法记录下来，以免遇到上古项目的时候需要</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install async --save</span><br></pre></td></tr></table></figure><h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><h3 id="series-task-callback"><a href="#series-task-callback" class="headerlink" title="series(task, [callback])"></a>series(task, [callback])</h3><p>多个函数依次执行，之间没有数据交换<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.series([</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">      callback(err, <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">      callback(err, <span class="number">2</span>)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      console.log(<span class="number">3</span></span>)</span></span><br><span class="line"><span class="function">      <span class="title">callback</span>(<span class="params">err, <span class="number">3</span></span>)</span></span><br><span class="line"><span class="function">    &#125;],<span class="title">function</span>(<span class="params">err, results</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// results = [v1, v2, v3]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>详细解释：</p><ol><li>依次执行一个函数数组中的每个函数，每一个函数执行完成之后才能执行下一个函数。</li><li>如果任何一个函数向它的回调函数中传了一个error，则后面的函数都不会被执行，并且将会立刻将该error以及已经执行了的函数的结果，传给series中最后的那个callback。</li><li>将所有的函数执行完后(没有出错),则会把每个函数传给其回调函数的结果合并为一个数组，传给series最后的那个callback。</li><li>还可以以json的形式提供tasks。每一个属性都会被当作函数来执行，并且结果也会以json形式传给series中最后的那个callback。这种方式可读性更高</li></ol><h3 id="waterfall-tasks-callback"><a href="#waterfall-tasks-callback" class="headerlink" title="waterfall(tasks, [callback])"></a>waterfall(tasks, [callback])</h3><p>多个函数依次执行，且前一个的输出为后一个的输入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.waterfall([</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">      callback(<span class="literal">null</span>, <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">n, callback</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">      callback(<span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">n, callback</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">      callback(<span class="literal">null</span>, <span class="number">3</span>)</span><br><span class="line">    &#125;], <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// results = 3</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>详细解释：</p><ol><li>按顺序依次执行多个函数，每一个函数产生的值，都将传给下一个函数，如果中途出错，后面的函数将不会执行，错误信息以及之前产生的结果，都传给waterfall最终的callback</li><li>该函数不支持json格式的tasks</li></ol><h3 id="parallel-tasks-callback"><a href="#parallel-tasks-callback" class="headerlink" title="parallel(tasks,[callback])"></a>parallel(tasks,[callback])</h3><p>多个函数并行执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.parallel([</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">      callback(<span class="literal">null</span>, <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">      callback(<span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">      callback(<span class="literal">null</span>, <span class="number">3</span>)</span><br><span class="line">    &#125;],<span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// results = [1, 2, 3]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>详细解释：</p><ol><li>并行执行多个函数，每个函数都是立刻执行，不需要等待其他函数先执行。传给最终callback的数组中的数据按照tasks声明的顺序，而不是执行完成的顺序</li><li>如果某个函数出错，则立刻将err和已经执行完的函数的结果值传给parallel最终的callback。其它为执行完的函数的值不会传到最终数据，但要占个位置。</li><li>同时支持json形式的tasks，其最终callback的结果也为json形式</li></ol><h3 id="whilst-test-fn-callback"><a href="#whilst-test-fn-callback" class="headerlink" title="whilst(test, fn, callback)"></a>whilst(test, fn, callback)</h3><p>循环执行任务<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">async</span>.whilst(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> count &lt; <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(count)</span><br><span class="line">        count++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>详细解释：</p><ol><li>第一个函数用于控制循环次数</li><li>在循环中，异步调用时产生的值实际上被丢弃了，因为最后的callback只能传入错误信息</li><li>第二个函数fn需要接受一个函数的cb, 这个cb最终必需被执行，用于表示出错或正常结束</li></ol><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>详细代码Demo可见<a href="https://github.com/alsotang/async_demo" target="_blank" rel="noopener">async_demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Promise和async/await出现之前，nodejs只能使用async库来解决“回调金字塔问题”&lt;/p&gt;
&lt;p&gt;把async中一些常用的语法记录下来，以免遇到上古项目的时候需要&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="nodejs" scheme="http://reezon.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>mac下反编译apk</title>
    <link href="http://reezon.github.io/2018/04/04/mac%E4%B8%8B%E5%8F%8D%E7%BC%96%E8%AF%91apk/"/>
    <id>http://reezon.github.io/2018/04/04/mac下反编译apk/</id>
    <published>2018-04-04T06:09:29.000Z</published>
    <updated>2018-04-11T09:39:53.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>apktool：用于反编译apk文件</li><li>dex2jar：用于将反编译出的class.dex转换成classes-dex2jar.jar</li><li>jd-gui：用于阅读classes-dex2jar.jar源码</li><li>signAPK：给重新打包后的apk签名</li></ul><h3 id="安装apktool"><a href="#安装apktool" class="headerlink" title="安装apktool"></a>安装apktool</h3><p>安装地址：<br><a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="noopener">https://ibotpeaches.github.io/Apktool/install/</a></p><p>根据教程将apktool安装好即可。</p><p>注意：需要先安装java sdk。<br>下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk9-downloads-3848520.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk9-downloads-3848520.html</a></p><h3 id="安装dex2jar"><a href="#安装dex2jar" class="headerlink" title="安装dex2jar"></a>安装dex2jar</h3><p>下载并解压dex2jar-2.0<br>为dex2jar-2.0添加权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod -R 777 dex2jar-2.0</span><br><span class="line">$ chmod +x d2j_invoke.sh</span><br></pre></td></tr></table></figure></p><h3 id="安装jd-gui"><a href="#安装jd-gui" class="headerlink" title="安装jd-gui"></a>安装jd-gui</h3><p>使用brew安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install jd-gui</span><br></pre></td></tr></table></figure></p><p>注意：只能运行在jdk 1.8版本下。否则按照此文档对jdk版本进行更改：<a href="http://blog.csdn.net/YoungStunner/article/details/78699864" target="_blank" rel="noopener">http://blog.csdn.net/YoungStunner/article/details/78699864</a></p><h2 id="反编译流程"><a href="#反编译流程" class="headerlink" title="反编译流程"></a>反编译流程</h2><h3 id="使用apktool反编译apk包"><a href="#使用apktool反编译apk包" class="headerlink" title="使用apktool反编译apk包"></a>使用apktool反编译apk包</h3><p>运行如下命令来反编译：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apktool d xxx.apk</span><br></pre></td></tr></table></figure></p><p>用压缩软件unzip achiever打开StabilityTest.apk，然后解压出位于根目录下的classes.dex</p><h3 id="使用dex2jar将classes-dex转换为jar包"><a href="#使用dex2jar将classes-dex转换为jar包" class="headerlink" title="使用dex2jar将classes.dex转换为jar包"></a>使用dex2jar将classes.dex转换为jar包</h3><p>运行如下命令来转换：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh d2j-dex2jar.sh classes.dex</span><br></pre></td></tr></table></figure></p><h3 id="使用jd-gui打开classes-dex2jar-jar"><a href="#使用jd-gui打开classes-dex2jar-jar" class="headerlink" title="使用jd-gui打开classes-dex2jar.jar"></a>使用jd-gui打开classes-dex2jar.jar</h3><p>如果觉得jd-gui查看代码不方便，还可以通过File-&gt;Save All Sources导出一个classes-dex2jar.src.zip，将classes-dex2jar.src.zip解压以后，导入到Sublime阅读代码。</p><h3 id="修改完smali源码后，使用apktool重新打包生成apk"><a href="#修改完smali源码后，使用apktool重新打包生成apk" class="headerlink" title="修改完smali源码后，使用apktool重新打包生成apk"></a>修改完smali源码后，使用apktool重新打包生成apk</h3><p>运行如下命令来打包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apktool b xxx.apk</span><br></pre></td></tr></table></figure></p><h3 id="使用sign-jar进行签名"><a href="#使用sign-jar进行签名" class="headerlink" title="使用sign.jar进行签名"></a>使用sign.jar进行签名</h3><p>运行如下命令来签名：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar sign.jar xxxx.apk</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;apktool：用于反编译apk文件&lt;/li&gt;
&lt;li&gt;dex2jar：用于将反编译出的class.dex转换成classes-
      
    
    </summary>
    
    
      <category term="apk" scheme="http://reezon.github.io/tags/apk/"/>
    
  </entry>
  
  <entry>
    <title>Docker实战</title>
    <link href="http://reezon.github.io/2018/04/03/Docker%E5%AE%9E%E6%88%98/"/>
    <id>http://reezon.github.io/2018/04/03/Docker实战/</id>
    <published>2018-04-03T14:21:14.000Z</published>
    <updated>2018-05-23T11:20:10.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>为用户实现独立域名绑定个人网站，但是一台阿里云ECS最多只允许5个域名进行备案，因此需要部署n台服务器，以满足5n个用户的个人网站。</p><p>这n台服务器的server代码和nginx配置都是相同的，最适合使用Docker技术来实现。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-在Ubuntu中安装Docker"><a href="#1-在Ubuntu中安装Docker" class="headerlink" title="1.在Ubuntu中安装Docker"></a>1.在Ubuntu中安装Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get update &amp;&amp; apt-get install docker.io</span><br></pre></td></tr></table></figure><h3 id="2-使用pull命令从官方镜像库中拽取一个-Ubuntu-14-04的image"><a href="#2-使用pull命令从官方镜像库中拽取一个-Ubuntu-14-04的image" class="headerlink" title="2.使用pull命令从官方镜像库中拽取一个 Ubuntu 14.04的image"></a>2.使用pull命令从官方镜像库中拽取一个 Ubuntu 14.04的image</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull ubuntu:14.04</span><br></pre></td></tr></table></figure><h3 id="3-如果拽取速度太慢，可以安装阿里云的Docker加速器"><a href="#3-如果拽取速度太慢，可以安装阿里云的Docker加速器" class="headerlink" title="3.如果拽取速度太慢，可以安装阿里云的Docker加速器"></a>3.如果拽取速度太慢，可以安装阿里云的Docker加速器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /etc/docker</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://03gzvkg6.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>阿里云的镜像地址是：dev.aliyun.com/search.html</p><h3 id="4-运行image"><a href="#4-运行image" class="headerlink" title="4.运行image"></a>4.运行image</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm ubuntu:14.04 bash</span><br></pre></td></tr></table></figure><p>其中：–rm表示退出后就销毁该container</p><h3 id="5-编写自己的Dockerfile"><a href="#5-编写自己的Dockerfile" class="headerlink" title="5.编写自己的Dockerfile"></a>5.编写自己的Dockerfile</h3><p>新建一个目录，在目录下运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch Dockerfile</span><br></pre></td></tr></table></figure></p><p>然后编辑这个Dockerfile文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:16.04</span><br><span class="line">MAINTAINER picbling &lt;it@picbling.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装环境</span></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">    git \</span><br><span class="line">    nginx \</span><br><span class="line">    htop \</span><br><span class="line">    vim \</span><br><span class="line">    curl \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装node</span></span><br><span class="line">RUN curl -sL https://deb.nodesource.com/setup_6.x | bash - \</span><br><span class="line">    &amp;&amp; apt-get install -y nodejs \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取server项目代码</span></span><br><span class="line">RUN <span class="built_in">cd</span> /root \</span><br><span class="line">    &amp;&amp; git <span class="built_in">clone</span> https://xxx/server.git \</span><br><span class="line">    &amp;&amp; <span class="built_in">cd</span> server \</span><br><span class="line">    &amp;&amp; npm i \</span><br><span class="line">    &amp;&amp; npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取nginx配置</span></span><br><span class="line">RUN <span class="built_in">cd</span> /root &amp;&amp; \</span><br><span class="line">    git <span class="built_in">clone</span> https://xxx/nginx.git &amp;&amp; \</span><br><span class="line">    <span class="built_in">cd</span> nginx &amp;&amp; \</span><br><span class="line">    cp nginx.conf /etc/nginx/  &amp;&amp; \</span><br><span class="line">    cp -rf sites-enabled /etc/nginx/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动pm2</span></span><br><span class="line">RUN npm i -g pm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行server</span></span><br><span class="line">CMD [<span class="string">"pm2"</span>, <span class="string">"start"</span>, <span class="string">"NODE_ENV=production /root/server/server.js"</span>]</span><br><span class="line"></span><br><span class="line">EXPOSE 22</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure></p><h3 id="6-在Dockerfile目录下运行命令来编译"><a href="#6-在Dockerfile目录下运行命令来编译" class="headerlink" title="6.在Dockerfile目录下运行命令来编译"></a>6.在Dockerfile目录下运行命令来编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t picbling/homepage-server-ubuntu-16.04 .</span><br></pre></td></tr></table></figure><h3 id="7-将image上传到云端"><a href="#7-将image上传到云端" class="headerlink" title="7.将image上传到云端"></a>7.将image上传到云端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker login</span><br><span class="line">$ docker push picbling/homepage-server-ubuntu-16.04</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;为用户实现独立域名绑定个人网站，但是一台阿里云ECS最多只允许5个域名进行备案，因此需要部署n台服务器，以满足5n个用户的个人网站。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="docker" scheme="http://reezon.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>在macOS上使用Hexo+github构建自己的博客</title>
    <link href="http://reezon.github.io/2018/03/30/%E5%9C%A8macOS%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo-github%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://reezon.github.io/2018/03/30/在macOS上使用Hexo-github构建自己的博客/</id>
    <published>2018-03-30T10:29:16.000Z</published>
    <updated>2018-03-30T11:02:31.440Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在macOS上安装Hexo"><a href="#在macOS上安装Hexo" class="headerlink" title="在macOS上安装Hexo"></a>在macOS上安装Hexo</h3><p>首先需要安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a>环境</p><p>然后运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g hexo</span><br></pre></td></tr></table></figure></p><h3 id="初始化blog项目"><a href="#初始化blog项目" class="headerlink" title="初始化blog项目"></a>初始化blog项目</h3><p>新建一个目录，然后进入目录，运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><h3 id="在github上创建博客项目"><a href="#在github上创建博客项目" class="headerlink" title="在github上创建博客项目"></a>在github上创建博客项目</h3><p>在github上创建一个如下名字的项目</p><blockquote><p>xxx.gihub.io</p></blockquote><h3 id="配置blog项目的发布方式"><a href="#配置blog项目的发布方式" class="headerlink" title="配置blog项目的发布方式"></a>配置blog项目的发布方式</h3><p>安装git发布插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>打开文件 <strong>_config.xml</strong> , 编辑如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><p>运行如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><p>运行如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>就能自动发布到xxx.github.io了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在macOS上安装Hexo&quot;&gt;&lt;a href=&quot;#在macOS上安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;在macOS上安装Hexo&quot;&gt;&lt;/a&gt;在macOS上安装Hexo&lt;/h3&gt;&lt;p&gt;首先需要安装&lt;a href=&quot;https://nod
      
    
    </summary>
    
    
      <category term="hexo github" scheme="http://reezon.github.io/tags/hexo-github/"/>
    
  </entry>
  
</feed>
